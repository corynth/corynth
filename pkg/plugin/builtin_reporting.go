package plugin

import (
	"context"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// ReportingPlugin implements report generation capabilities
type ReportingPlugin struct{}

func (p *ReportingPlugin) Metadata() Metadata {
	return Metadata{
		Name:        "reporting",
		Version:     "1.0.0",
		Description: "Generate formatted reports with tables, charts, and multiple output formats",
		Author:      "Corynth Team",
		Tags:        []string{"reporting", "markdown", "tables", "documentation", "output"},
		License:     "Apache-2.0",
	}
}

func (p *ReportingPlugin) Actions() []Action {
	return []Action{
		{
			Name:        "generate",
			Description: "Generate a simple formatted report",
			Inputs: map[string]InputSpec{
				"title": {
					Type:        "string",
					Description: "Report title",
					Required:    true,
				},
				"content": {
					Type:        "string",
					Description: "Report content/body",
					Required:    true,
				},
				"format": {
					Type:        "string",
					Description: "Output format (markdown, text, json)",
					Required:    false,
					Default:     "markdown",
				},
				"output_path": {
					Type:        "string",
					Description: "Path to save the report file",
					Required:    false,
				},
			},
			Outputs: map[string]OutputSpec{
				"report": {
					Type:        "string",
					Description: "Generated report content",
				},
				"file_path": {
					Type:        "string",
					Description: "Path where report was saved",
				},
			},
		},
		{
			Name:        "display",
			Description: "Display content on screen with formatting",
			Inputs: map[string]InputSpec{
				"content": {
					Type:        "string",
					Description: "Content to display",
					Required:    true,
				},
				"title": {
					Type:        "string",
					Description: "Optional title",
					Required:    false,
				},
			},
			Outputs: map[string]OutputSpec{
				"displayed": {
					Type:        "boolean",
					Description: "Whether content was displayed successfully",
				},
			},
		},
	}
}

func (p *ReportingPlugin) Validate(params map[string]interface{}) error {
	return nil
}

func (p *ReportingPlugin) Execute(ctx context.Context, action string, params map[string]interface{}) (map[string]interface{}, error) {
	switch action {
	case "generate":
		return p.executeGenerate(ctx, params)
	case "display":
		return p.executeDisplay(ctx, params)
	default:
		return nil, fmt.Errorf("unknown action: %s", action)
	}
}

func (p *ReportingPlugin) executeGenerate(ctx context.Context, params map[string]interface{}) (map[string]interface{}, error) {
	title, ok := params["title"].(string)
	if !ok {
		return nil, fmt.Errorf("title parameter is required")
	}

	content, ok := params["content"].(string)
	if !ok {
		return nil, fmt.Errorf("content parameter is required")
	}

	format := "markdown"
	if f, ok := params["format"].(string); ok {
		format = f
	}

	// Generate report based on format
	var report string
	switch strings.ToLower(format) {
	case "markdown", "md":
		report = p.generateMarkdownReport(title, content)
	case "text", "txt":
		report = p.generateTextReport(title, content)
	case "json":
		report = p.generateJSONReport(title, content)
	default:
		return nil, fmt.Errorf("unsupported format: %s", format)
	}

	result := map[string]interface{}{
		"report":    report,
		"format":    format,
		"title":     title,
		"generated": time.Now().Format(time.RFC3339),
	}

	// Save to file if output_path is specified
	if outputPath, ok := params["output_path"].(string); ok && outputPath != "" {
		// Ensure directory exists
		dir := filepath.Dir(outputPath)
		if err := os.MkdirAll(dir, 0755); err != nil {
			return nil, fmt.Errorf("failed to create directory %s: %w", dir, err)
		}

		// Write report to file
		if err := os.WriteFile(outputPath, []byte(report), 0644); err != nil {
			return nil, fmt.Errorf("failed to write report to %s: %w", outputPath, err)
		}

		result["file_path"] = outputPath
		result["saved"] = true
	}

	return result, nil
}

func (p *ReportingPlugin) executeDisplay(ctx context.Context, params map[string]interface{}) (map[string]interface{}, error) {
	content, ok := params["content"].(string)
	if !ok {
		return nil, fmt.Errorf("content parameter is required")
	}

	// Display with optional title
	if title, ok := params["title"].(string); ok && title != "" {
		fmt.Printf("\n=== %s ===\n", title)
	}

	fmt.Println(content)

	return map[string]interface{}{
		"displayed": true,
		"content":   content,
	}, nil
}

func (p *ReportingPlugin) generateMarkdownReport(title, content string) string {
	timestamp := time.Now().Format("January 2, 2006 15:04:05")
	
	return fmt.Sprintf(`# %s

**Generated:** %s

---

%s

---

*Generated by Corynth Reporting Plugin*
`, title, timestamp, content)
}

func (p *ReportingPlugin) generateTextReport(title, content string) string {
	timestamp := time.Now().Format("January 2, 2006 15:04:05")
	separator := strings.Repeat("=", len(title))
	
	return fmt.Sprintf(`%s
%s
%s

Generated: %s

%s

Generated by Corynth Reporting Plugin
`, separator, title, separator, timestamp, content)
}

func (p *ReportingPlugin) generateJSONReport(title, content string) string {
	timestamp := time.Now().Format(time.RFC3339)
	
	return fmt.Sprintf(`{
  "title": "%s",
  "generated": "%s",
  "content": "%s",
  "generator": "Corynth Reporting Plugin"
}`, title, timestamp, strings.ReplaceAll(content, `"`, `\"`))
}