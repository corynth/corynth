syntax = "proto3";

package corynth.plugin.v1;

option go_package = "github.com/corynth/corynth/pkg/plugin/proto";

// PluginService defines the gRPC interface for Corynth plugins
service PluginService {
  // GetMetadata returns plugin metadata
  rpc GetMetadata(MetadataRequest) returns (MetadataResponse);
  
  // GetActions returns available plugin actions
  rpc GetActions(ActionsRequest) returns (ActionsResponse);
  
  // ValidateParams validates action parameters
  rpc ValidateParams(ValidateRequest) returns (ValidateResponse);
  
  // Execute runs a plugin action
  rpc Execute(ExecuteRequest) returns (ExecuteResponse);
  
  // Health check for plugin availability
  rpc Health(HealthRequest) returns (HealthResponse);
}

// Request/Response messages for metadata
message MetadataRequest {}

message MetadataResponse {
  string name = 1;
  string version = 2;
  string description = 3;
  string author = 4;
  repeated string tags = 5;
}

// Request/Response messages for actions
message ActionsRequest {}

message ActionsResponse {
  repeated Action actions = 1;
}

message Action {
  string name = 1;
  string description = 2;
  map<string, InputSpec> inputs = 3;
  map<string, OutputSpec> outputs = 4;
}

message InputSpec {
  string type = 1;
  string description = 2;
  bool required = 3;
  Value default_value = 4;
}

message OutputSpec {
  string type = 1;
  string description = 2;
}

// Request/Response messages for validation
message ValidateRequest {
  string action = 1;
  map<string, Value> params = 2;
}

message ValidateResponse {
  bool valid = 1;
  repeated string errors = 2;
}

// Request/Response messages for execution
message ExecuteRequest {
  string action = 1;
  map<string, Value> params = 2;
  ExecuteContext context = 3;
}

message ExecuteResponse {
  bool success = 1;
  map<string, Value> outputs = 2;
  string error = 3;
  ExecuteMetrics metrics = 4;
}

message ExecuteContext {
  string workflow_id = 1;
  string step_id = 2;
  int64 timeout_seconds = 3;
  map<string, string> environment = 4;
}

message ExecuteMetrics {
  int64 duration_ms = 1;
  int64 memory_bytes = 2;
  string status = 3;
}

// Health check messages
message HealthRequest {}

message HealthResponse {
  bool healthy = 1;
  string status = 2;
}

// Value represents any JSON-like value
message Value {
  oneof kind {
    string string_value = 1;
    double number_value = 2;
    bool bool_value = 3;
    ValueArray array_value = 4;
    ValueObject object_value = 5;
    google.protobuf.NullValue null_value = 6;
  }
}

message ValueArray {
  repeated Value values = 1;
}

message ValueObject {
  map<string, Value> fields = 1;
}

import "google/protobuf/struct.proto";